salaries_cleaned = salaries_cleaned %>%
inner_join(salaries_cleaned_2) %>%
inner_join(salaries_cleaned_3)
salaries_cleaned$Player[which(salaries_cleaned$Player == "Mohamed Bamba",arr.ind = TRUE)] = "Mo Bamba"
salaries_cleaned$Player[which(salaries_cleaned$Player == "Taurean Waller-Prince",arr.ind = TRUE)] = "Taurean Prince"
salaries_cleaned$`Salary(2019-2020)` = salaries_cleaned$`Salary(2019-2020)`/1000000
salaries_cleaned$Guaranteed = salaries_cleaned$Guaranteed/1000000
salaries_cleaned = salaries_cleaned[,-c(1,3)]
duplicate_players <- player_stats %>%
count(Player) %>%
filter(n > 1)
player_stats_cleaned <- player_stats %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players$Player))
num_transform <- player_stats_cleaned %>%
select(-Rk,-Player,-Pos,-Tm)
for(i in colnames(num_transform)){
player_stats_cleaned[[i]] = as.numeric(player_stats_cleaned[[i]])
}
player_stats_cleaned$Player = gsub(" Jr.","",player_stats_cleaned$Player,fixed = TRUE)
player_stats_cleaned$Player = gsub(" III","",player_stats_cleaned$Player,fixed = TRUE)
player_stats_cleaned$Pos = gsub("-..$","",player_stats_cleaned$Pos)
adv_stats_cleaned = adv_stats[,-c(1,3:4,6:7,20,25)]
duplicate_players_2 <- adv_stats_cleaned %>%
count(Player) %>%
filter(n > 1)
adv_stats_cleaned <- adv_stats_cleaned %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players_2$Player))
num_transform_2 <- adv_stats_cleaned %>%
select(-Player,-Tm)
for(i in colnames(num_transform_2)){
adv_stats_cleaned[[i]] = as.numeric(adv_stats_cleaned[[i]])
}
adv_stats_cleaned = adv_stats_cleaned[,-2]
adv_stats_cleaned$Player = gsub(" Jr.","",adv_stats_cleaned$Player,fixed = TRUE)
adv_stats_cleaned$Player = gsub(" III","",adv_stats_cleaned$Player,fixed = TRUE)
per_100_cleaned = per_100[,c(2,5,31:32)]
duplicate_players_3 <- per_100_cleaned %>%
count(Player) %>%
filter(n > 1)
per_100_cleaned <- per_100_cleaned %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players_3$Player))
per_100_cleaned$ORtg = as.numeric(per_100_cleaned$ORtg)
per_100_cleaned$DRtg = as.numeric(per_100_cleaned$DRtg)
per_100_cleaned = per_100_cleaned[,-2]
per_100_cleaned$Player = gsub(" Jr.","",per_100_cleaned$Player,fixed = TRUE)
per_100_cleaned$Player = gsub(" III","",per_100_cleaned$Player,fixed = TRUE)
salaries_stats <- player_stats_cleaned %>%
inner_join(salaries_cleaned) %>%
inner_join(adv_stats_cleaned) %>%
inner_join(per_100_cleaned)
salaries_stats$Pos = as.factor(salaries_stats$Pos)
##Converting the age variable into a categorical variable
salaries_stats <- salaries_stats %>%
mutate(Age_cat = cut(Age, breaks = c(-Inf,26,34,Inf),
labels = c("Young","Prime","Old")))
all_stars$Player = all_stars$Player[all_stars$Player != "Carmelo Anthony" & all_stars$Player != "Isaiah Thomas"]
library(rvest)
library(dplyr)
webpage = read_html("https://www.basketball-reference.com/contracts/players.html") ##scrape salary data
salaries <- html_table(webpage)[[1]]
colnames(salaries) <- c("Rank","Player","Team","Salary(2019-2020)","Salary(2020-2021)","Salary(2021-2022)","Salary(2022-2023","Salary(2023-2024)","Salary(2024-2025)","Signed Using","Guaranteed")
webpage2 <- read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_game.html") ##scrape basic statistics
player_stats <- html_table(webpage2, header = TRUE)[[1]]
webpage3 <- read_html("https://www.basketball-reference.com/leagues/NBA_2020_advanced.html") ##scrape advanced statistics
webpage4 <- read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_poss.html")
webpage5 <- read_html("https://www.basketball-reference.com/awards/all_star_by_player.html")
adv_stats <- html_table(webpage3, header = TRUE)[[1]]
per_100 <- html_table(webpage4, header = TRUE)[[1]]
all_stars = html_table(webpage5, header = TRUE)[[1]]
##filter out empty rows and incorrect rows
salaries_cleaned <- salaries %>%
filter(Player != "Player" & Player != "")
salaries_cleaned = salaries_cleaned[,-c(5:9)] ##filter out variables we are not interested in
##clean salary column to prepare for numeric conversion
salaries_cleaned$`Salary(2019-2020)` = gsub("$","",salaries_cleaned$`Salary(2019-2020)`,fixed = TRUE)
salaries_cleaned$`Salary(2019-2020)` = gsub(",","",salaries_cleaned$`Salary(2019-2020)`,fixed = TRUE)
salaries_cleaned$Guaranteed =  gsub("$","",salaries_cleaned$Guaranteed,fixed = TRUE)
salaries_cleaned$Guaranteed = gsub(",","",salaries_cleaned$Guaranteed,fixed = TRUE)
##Fill in empty rows in "signed using"
salaries_cleaned$`Signed Using` = replace(salaries_cleaned$`Signed Using`, salaries_cleaned$`Signed Using` == "", "Other")
salaries_cleaned$`Salary(2019-2020)` = as.numeric(salaries_cleaned$`Salary(2019-2020)`)
salaries_cleaned$Guaranteed = as.numeric(salaries_cleaned$Guaranteed)
##Adding salaries for players who were on multiple teams
salaries_cleaned_2 <- aggregate(`Salary(2019-2020)` ~ Player, data = salaries_cleaned, sum)
salaries_cleaned_3 <- aggregate(Guaranteed ~ Player, data = salaries_cleaned, sum)
salaries_cleaned = salaries_cleaned[!duplicated(salaries_cleaned$Player),] %>%
select(-`Salary(2019-2020)`,-Guaranteed)
##Adding combined salaries to dataset using an inner join
salaries_cleaned = salaries_cleaned %>%
inner_join(salaries_cleaned_2) %>%
inner_join(salaries_cleaned_3)
salaries_cleaned$Player[which(salaries_cleaned$Player == "Mohamed Bamba",arr.ind = TRUE)] = "Mo Bamba"
salaries_cleaned$Player[which(salaries_cleaned$Player == "Taurean Waller-Prince",arr.ind = TRUE)] = "Taurean Prince"
salaries_cleaned$`Salary(2019-2020)` = salaries_cleaned$`Salary(2019-2020)`/1000000
salaries_cleaned$Guaranteed = salaries_cleaned$Guaranteed/1000000
salaries_cleaned = salaries_cleaned[,-c(1,3)]
duplicate_players <- player_stats %>%
count(Player) %>%
filter(n > 1)
player_stats_cleaned <- player_stats %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players$Player))
num_transform <- player_stats_cleaned %>%
select(-Rk,-Player,-Pos,-Tm)
for(i in colnames(num_transform)){
player_stats_cleaned[[i]] = as.numeric(player_stats_cleaned[[i]])
}
player_stats_cleaned$Player = gsub(" Jr.","",player_stats_cleaned$Player,fixed = TRUE)
player_stats_cleaned$Player = gsub(" III","",player_stats_cleaned$Player,fixed = TRUE)
player_stats_cleaned$Pos = gsub("-..$","",player_stats_cleaned$Pos)
adv_stats_cleaned = adv_stats[,-c(1,3:4,6:7,20,25)]
duplicate_players_2 <- adv_stats_cleaned %>%
count(Player) %>%
filter(n > 1)
adv_stats_cleaned <- adv_stats_cleaned %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players_2$Player))
num_transform_2 <- adv_stats_cleaned %>%
select(-Player,-Tm)
for(i in colnames(num_transform_2)){
adv_stats_cleaned[[i]] = as.numeric(adv_stats_cleaned[[i]])
}
adv_stats_cleaned = adv_stats_cleaned[,-2]
adv_stats_cleaned$Player = gsub(" Jr.","",adv_stats_cleaned$Player,fixed = TRUE)
adv_stats_cleaned$Player = gsub(" III","",adv_stats_cleaned$Player,fixed = TRUE)
per_100_cleaned = per_100[,c(2,5,31:32)]
duplicate_players_3 <- per_100_cleaned %>%
count(Player) %>%
filter(n > 1)
per_100_cleaned <- per_100_cleaned %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players_3$Player))
per_100_cleaned$ORtg = as.numeric(per_100_cleaned$ORtg)
per_100_cleaned$DRtg = as.numeric(per_100_cleaned$DRtg)
per_100_cleaned = per_100_cleaned[,-2]
per_100_cleaned$Player = gsub(" Jr.","",per_100_cleaned$Player,fixed = TRUE)
per_100_cleaned$Player = gsub(" III","",per_100_cleaned$Player,fixed = TRUE)
salaries_stats <- player_stats_cleaned %>%
inner_join(salaries_cleaned) %>%
inner_join(adv_stats_cleaned) %>%
inner_join(per_100_cleaned)
salaries_stats$Pos = as.factor(salaries_stats$Pos)
##Converting the age variable into a categorical variable
salaries_stats <- salaries_stats %>%
mutate(Age_cat = cut(Age, breaks = c(-Inf,26,34,Inf),
labels = c("Young","Prime","Old")))
all_stars = all_stars %>%
filter(Player != "Carmelo Anthony" & Player != "Isaiah Thomas")
salaries_stats <- salaries_stats %>%
mutate(Starter = as.factor(if_else(GS/G > 0.9,"Yes","No")),
G_f = as.factor(if_else(Pos == "PG"|Pos == "SG","Guard","Forward")),
All_Star = salaries_stats$Player %in% all_stars$Player)
salaries_stats[is.na(salaries_stats)] = 0
set.seed(10)
training = sample_frac(salaries_stats,(6/8)) #training dataset
testing = salaries_stats %>%
filter(!(Player %in% training$Player)) #testing dataset
salary_model = lm(`Salary(2019-2020)` ~ Pos + TRB + PTS + TOV + AST + PER + `USG%` + BPM + VORP + WS + `AST%` + FTA + Age_cat + Starter + All_Star, data = training)
summary(salary_model)
prediction_data = data.frame(player = testing$Player,Actual = testing$`Salary(2019-2020)`,Predicted = predict(salary_model,newdata = testing))
prediction_data$player = as.character(prediction_data$player)
ggplot(prediction_data, aes(x = Actual, y = Predicted)) +
geom_point(color = "purple") +
geom_abline(intercept = 0, slope = 1) +
geom_label_repel(aes(label= ifelse(Actual > 25 ,player,"")))
final_model = lm(`Salary(2019-2020)` ~ Pos + TRB + PTS + TOV + AST + PER + `USG%` + BPM + VORP + WS + `AST%` + FTA + Age_cat + Starter + All_Star, data = salaries_stats)
par(mfrow = c(2,3))
plot(final_model,which = 1)
plot(final_model,which = 2)
plot(final_model,which = 3)
plot(final_model,which = 4)
plot(final_model,which = 5)
salaries_stats$Residual = final_model$residuals
salaries_stats %>%
arrange(Residual)
##filter out empty rows and incorrect rows
salaries_cleaned <- salaries %>%
filter(Player != "Player" & Player != "")
salaries_cleaned = salaries_cleaned[,-c(5:9)] ##filter out variables we are not interested in
##clean salary column to prepare for numeric conversion
salaries_cleaned$`Salary(2019-2020)` = gsub("$","",salaries_cleaned$`Salary(2019-2020)`,fixed = TRUE)
salaries_cleaned$`Salary(2019-2020)` = gsub(",","",salaries_cleaned$`Salary(2019-2020)`,fixed = TRUE)
salaries_cleaned$Guaranteed =  gsub("$","",salaries_cleaned$Guaranteed,fixed = TRUE)
salaries_cleaned$Guaranteed = gsub(",","",salaries_cleaned$Guaranteed,fixed = TRUE)
##Fill in empty rows in "signed using"
salaries_cleaned$`Signed Using` = replace(salaries_cleaned$`Signed Using`, salaries_cleaned$`Signed Using` == "", "Other")
salaries_cleaned$`Salary(2019-2020)` = as.numeric(salaries_cleaned$`Salary(2019-2020)`)
salaries_cleaned$Guaranteed = as.numeric(salaries_cleaned$Guaranteed)
##Adding salaries for players who were on multiple teams
salaries_cleaned_2 <- aggregate(`Salary(2019-2020)` ~ Player, data = salaries_cleaned, sum)
salaries_cleaned_3 <- aggregate(Guaranteed ~ Player, data = salaries_cleaned, sum)
salaries_cleaned = salaries_cleaned[!duplicated(salaries_cleaned$Player),] %>%
select(-`Salary(2019-2020)`,-Guaranteed)
##Adding combined salaries to dataset using an inner join
salaries_cleaned = salaries_cleaned %>%
inner_join(salaries_cleaned_2) %>%
inner_join(salaries_cleaned_3)
salaries_cleaned$Player[which(salaries_cleaned$Player == "Mohamed Bamba",arr.ind = TRUE)] = "Mo Bamba"
salaries_cleaned$Player[which(salaries_cleaned$Player == "Taurean Waller-Prince",arr.ind = TRUE)] = "Taurean Prince"
salaries_cleaned$`Salary(2019-2020)` = salaries_cleaned$`Salary(2019-2020)`/1000000
salaries_cleaned$Guaranteed = salaries_cleaned$Guaranteed/1000000
salaries_cleaned = salaries_cleaned[,-c(1,3)]
duplicate_players <- player_stats %>%
count(Player) %>%
filter(n > 1)
player_stats_cleaned <- player_stats %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players$Player))
num_transform <- player_stats_cleaned %>%
select(-Rk,-Player,-Pos,-Tm)
for(i in colnames(num_transform)){
player_stats_cleaned[[i]] = as.numeric(player_stats_cleaned[[i]])
}
player_stats_cleaned$Player = gsub(" Jr.","",player_stats_cleaned$Player,fixed = TRUE)
player_stats_cleaned$Player = gsub(" III","",player_stats_cleaned$Player,fixed = TRUE)
player_stats_cleaned$Pos = gsub("-..$","",player_stats_cleaned$Pos)
adv_stats_cleaned = adv_stats[,-c(1,3:4,6:7,20,25)]
duplicate_players_2 <- adv_stats_cleaned %>%
count(Player) %>%
filter(n > 1)
adv_stats_cleaned <- adv_stats_cleaned %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players_2$Player))
num_transform_2 <- adv_stats_cleaned %>%
select(-Player,-Tm)
for(i in colnames(num_transform_2)){
adv_stats_cleaned[[i]] = as.numeric(adv_stats_cleaned[[i]])
}
adv_stats_cleaned = adv_stats_cleaned[,-2]
adv_stats_cleaned$Player = gsub(" Jr.","",adv_stats_cleaned$Player,fixed = TRUE)
adv_stats_cleaned$Player = gsub(" III","",adv_stats_cleaned$Player,fixed = TRUE)
per_100_cleaned = per_100[,c(2,5,31:32)]
duplicate_players_3 <- per_100_cleaned %>%
count(Player) %>%
filter(n > 1)
per_100_cleaned <- per_100_cleaned %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players_3$Player))
per_100_cleaned$ORtg = as.numeric(per_100_cleaned$ORtg)
per_100_cleaned$DRtg = as.numeric(per_100_cleaned$DRtg)
per_100_cleaned = per_100_cleaned[,-2]
per_100_cleaned$Player = gsub(" Jr.","",per_100_cleaned$Player,fixed = TRUE)
per_100_cleaned$Player = gsub(" III","",per_100_cleaned$Player,fixed = TRUE)
salaries_stats <- player_stats_cleaned %>%
inner_join(salaries_cleaned) %>%
inner_join(adv_stats_cleaned) %>%
inner_join(per_100_cleaned)
salaries_stats$Pos = as.factor(salaries_stats$Pos)
##Converting the age variable into a categorical variable
salaries_stats <- salaries_stats %>%
mutate(Age_cat = cut(Age, breaks = c(-Inf,26,34,Inf),
labels = c("Young","Prime","Old")))
all_stars = all_stars %>%
filter(Player != "Carmelo Anthony" & Player != "Isaiah Thomas" & Player != "Rajon Rondo" & Player != "Derrick Rose")
salaries_stats <- salaries_stats %>%
mutate(Starter = as.factor(if_else(GS/G > 0.9,"Yes","No")),
G_f = as.factor(if_else(Pos == "PG"|Pos == "SG","Guard","Forward")),
All_Star = salaries_stats$Player %in% all_stars$Player)
salaries_stats[is.na(salaries_stats)] = 0
final_model = lm(`Salary(2019-2020)` ~ Pos + TRB + PTS + TOV + AST + PER + `USG%` + BPM + VORP + WS + `AST%` + FTA + Age_cat + Starter + All_Star, data = salaries_stats)
par(mfrow = c(2,3))
plot(final_model,which = 1)
plot(final_model,which = 2)
plot(final_model,which = 3)
plot(final_model,which = 4)
plot(final_model,which = 5)
salaries_stats$Residual = final_model$residuals
salaries_stats %>%
arrange(Residual)
set.seed(10)
training = sample_frac(salaries_stats,(6/8)) #training dataset
testing = salaries_stats %>%
filter(!(Player %in% training$Player)) #testing dataset
salary_model = lm(`Salary(2019-2020)` ~ Pos + TRB + PTS + TOV + AST + PER + `USG%` + BPM + VORP + WS + `AST%` + FTA + Age_cat + Starter + All_Star, data = training)
summary(salary_model)
##filter out empty rows and incorrect rows
salaries_cleaned <- salaries %>%
filter(Player != "Player" & Player != "")
salaries_cleaned = salaries_cleaned[,-c(5:9)] ##filter out variables we are not interested in
##clean salary column to prepare for numeric conversion
salaries_cleaned$`Salary(2019-2020)` = gsub("$","",salaries_cleaned$`Salary(2019-2020)`,fixed = TRUE)
salaries_cleaned$`Salary(2019-2020)` = gsub(",","",salaries_cleaned$`Salary(2019-2020)`,fixed = TRUE)
salaries_cleaned$Guaranteed =  gsub("$","",salaries_cleaned$Guaranteed,fixed = TRUE)
salaries_cleaned$Guaranteed = gsub(",","",salaries_cleaned$Guaranteed,fixed = TRUE)
##Fill in empty rows in "signed using"
salaries_cleaned$`Signed Using` = replace(salaries_cleaned$`Signed Using`, salaries_cleaned$`Signed Using` == "", "Other")
salaries_cleaned$`Salary(2019-2020)` = as.numeric(salaries_cleaned$`Salary(2019-2020)`)
salaries_cleaned$Guaranteed = as.numeric(salaries_cleaned$Guaranteed)
##Adding salaries for players who were on multiple teams
salaries_cleaned_2 <- aggregate(`Salary(2019-2020)` ~ Player, data = salaries_cleaned, sum)
salaries_cleaned_3 <- aggregate(Guaranteed ~ Player, data = salaries_cleaned, sum)
salaries_cleaned = salaries_cleaned[!duplicated(salaries_cleaned$Player),] %>%
select(-`Salary(2019-2020)`,-Guaranteed)
##Adding combined salaries to dataset using an inner join
salaries_cleaned = salaries_cleaned %>%
inner_join(salaries_cleaned_2) %>%
inner_join(salaries_cleaned_3)
salaries_cleaned$Player[which(salaries_cleaned$Player == "Mohamed Bamba",arr.ind = TRUE)] = "Mo Bamba"
salaries_cleaned$Player[which(salaries_cleaned$Player == "Taurean Waller-Prince",arr.ind = TRUE)] = "Taurean Prince"
salaries_cleaned$`Salary(2019-2020)` = salaries_cleaned$`Salary(2019-2020)`/1000000
salaries_cleaned$Guaranteed = salaries_cleaned$Guaranteed/1000000
salaries_cleaned = salaries_cleaned[,-c(1,3)]
duplicate_players <- player_stats %>%
count(Player) %>%
filter(n > 1)
player_stats_cleaned <- player_stats %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players$Player))
num_transform <- player_stats_cleaned %>%
select(-Rk,-Player,-Pos,-Tm)
for(i in colnames(num_transform)){
player_stats_cleaned[[i]] = as.numeric(player_stats_cleaned[[i]])
}
player_stats_cleaned$Player = gsub(" Jr.","",player_stats_cleaned$Player,fixed = TRUE)
player_stats_cleaned$Player = gsub(" III","",player_stats_cleaned$Player,fixed = TRUE)
player_stats_cleaned$Pos = gsub("-..$","",player_stats_cleaned$Pos)
adv_stats_cleaned = adv_stats[,-c(1,3:4,6:7,20,25)]
duplicate_players_2 <- adv_stats_cleaned %>%
count(Player) %>%
filter(n > 1)
adv_stats_cleaned <- adv_stats_cleaned %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players_2$Player))
num_transform_2 <- adv_stats_cleaned %>%
select(-Player,-Tm)
for(i in colnames(num_transform_2)){
adv_stats_cleaned[[i]] = as.numeric(adv_stats_cleaned[[i]])
}
adv_stats_cleaned = adv_stats_cleaned[,-2]
adv_stats_cleaned$Player = gsub(" Jr.","",adv_stats_cleaned$Player,fixed = TRUE)
adv_stats_cleaned$Player = gsub(" III","",adv_stats_cleaned$Player,fixed = TRUE)
per_100_cleaned = per_100[,c(2,5,31:32)]
duplicate_players_3 <- per_100_cleaned %>%
count(Player) %>%
filter(n > 1)
per_100_cleaned <- per_100_cleaned %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players_3$Player))
per_100_cleaned$ORtg = as.numeric(per_100_cleaned$ORtg)
per_100_cleaned$DRtg = as.numeric(per_100_cleaned$DRtg)
per_100_cleaned = per_100_cleaned[,-2]
per_100_cleaned$Player = gsub(" Jr.","",per_100_cleaned$Player,fixed = TRUE)
per_100_cleaned$Player = gsub(" III","",per_100_cleaned$Player,fixed = TRUE)
salaries_stats <- player_stats_cleaned %>%
inner_join(salaries_cleaned) %>%
inner_join(adv_stats_cleaned) %>%
inner_join(per_100_cleaned)
salaries_stats$Pos = as.factor(salaries_stats$Pos)
##Converting the age variable into a categorical variable
salaries_stats <- salaries_stats %>%
mutate(Age_cat = cut(Age, breaks = c(-Inf,26,34,Inf),
labels = c("Young","Prime","Old")))
all_stars = all_stars %>%
filter(Player != "Carmelo Anthony" & Player != "Isaiah Thomas" & Player != "Rajon Rondo" & Player != "Derrick Rose" & Player != "Vince Carter" & Player != "Dwight Howard")
salaries_stats <- salaries_stats %>%
mutate(Starter = as.factor(if_else(GS/G > 0.9,"Yes","No")),
G_f = as.factor(if_else(Pos == "PG"|Pos == "SG","Guard","Forward")),
All_Star = salaries_stats$Player %in% all_stars$Player)
salaries_stats[is.na(salaries_stats)] = 0
set.seed(10)
training = sample_frac(salaries_stats,(6/8)) #training dataset
testing = salaries_stats %>%
filter(!(Player %in% training$Player)) #testing dataset
salary_model = lm(`Salary(2019-2020)` ~ Pos + TRB + PTS + TOV + AST + PER + `USG%` + BPM + VORP + WS + `AST%` + FTA + Age_cat + Starter + All_Star, data = training)
summary(salary_model)
final_model = lm(`Salary(2019-2020)` ~ Pos + TRB + PTS + TOV + AST + PER + `USG%` + BPM + VORP + WS + `AST%` + FTA + Age_cat + Starter + All_Star, data = salaries_stats)
par(mfrow = c(2,3))
plot(final_model,which = 1)
plot(final_model,which = 2)
plot(final_model,which = 3)
plot(final_model,which = 4)
plot(final_model,which = 5)
salaries_stats$Residual = final_model$residuals
salaries_stats %>%
arrange(Residual)
##filter out empty rows and incorrect rows
salaries_cleaned <- salaries %>%
filter(Player != "Player" & Player != "")
salaries_cleaned = salaries_cleaned[,-c(5:9)] ##filter out variables we are not interested in
##clean salary column to prepare for numeric conversion
salaries_cleaned$`Salary(2019-2020)` = gsub("$","",salaries_cleaned$`Salary(2019-2020)`,fixed = TRUE)
salaries_cleaned$`Salary(2019-2020)` = gsub(",","",salaries_cleaned$`Salary(2019-2020)`,fixed = TRUE)
salaries_cleaned$Guaranteed =  gsub("$","",salaries_cleaned$Guaranteed,fixed = TRUE)
salaries_cleaned$Guaranteed = gsub(",","",salaries_cleaned$Guaranteed,fixed = TRUE)
##Fill in empty rows in "signed using"
salaries_cleaned$`Signed Using` = replace(salaries_cleaned$`Signed Using`, salaries_cleaned$`Signed Using` == "", "Other")
salaries_cleaned$`Salary(2019-2020)` = as.numeric(salaries_cleaned$`Salary(2019-2020)`)
salaries_cleaned$Guaranteed = as.numeric(salaries_cleaned$Guaranteed)
##Adding salaries for players who were on multiple teams
salaries_cleaned_2 <- aggregate(`Salary(2019-2020)` ~ Player, data = salaries_cleaned, sum)
salaries_cleaned_3 <- aggregate(Guaranteed ~ Player, data = salaries_cleaned, sum)
salaries_cleaned = salaries_cleaned[!duplicated(salaries_cleaned$Player),] %>%
select(-`Salary(2019-2020)`,-Guaranteed)
##Adding combined salaries to dataset using an inner join
salaries_cleaned = salaries_cleaned %>%
inner_join(salaries_cleaned_2) %>%
inner_join(salaries_cleaned_3)
salaries_cleaned$Player[which(salaries_cleaned$Player == "Mohamed Bamba",arr.ind = TRUE)] = "Mo Bamba"
salaries_cleaned$Player[which(salaries_cleaned$Player == "Taurean Waller-Prince",arr.ind = TRUE)] = "Taurean Prince"
salaries_cleaned$`Salary(2019-2020)` = salaries_cleaned$`Salary(2019-2020)`/1000000
salaries_cleaned$Guaranteed = salaries_cleaned$Guaranteed/1000000
salaries_cleaned = salaries_cleaned[,-c(1,3)]
duplicate_players <- player_stats %>%
count(Player) %>%
filter(n > 1)
player_stats_cleaned <- player_stats %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players$Player))
num_transform <- player_stats_cleaned %>%
select(-Rk,-Player,-Pos,-Tm)
for(i in colnames(num_transform)){
player_stats_cleaned[[i]] = as.numeric(player_stats_cleaned[[i]])
}
player_stats_cleaned$Player = gsub(" Jr.","",player_stats_cleaned$Player,fixed = TRUE)
player_stats_cleaned$Player = gsub(" III","",player_stats_cleaned$Player,fixed = TRUE)
player_stats_cleaned$Pos = gsub("-..$","",player_stats_cleaned$Pos)
adv_stats_cleaned = adv_stats[,-c(1,3:4,6:7,20,25)]
duplicate_players_2 <- adv_stats_cleaned %>%
count(Player) %>%
filter(n > 1)
adv_stats_cleaned <- adv_stats_cleaned %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players_2$Player))
num_transform_2 <- adv_stats_cleaned %>%
select(-Player,-Tm)
for(i in colnames(num_transform_2)){
adv_stats_cleaned[[i]] = as.numeric(adv_stats_cleaned[[i]])
}
adv_stats_cleaned = adv_stats_cleaned[,-2]
adv_stats_cleaned$Player = gsub(" Jr.","",adv_stats_cleaned$Player,fixed = TRUE)
adv_stats_cleaned$Player = gsub(" III","",adv_stats_cleaned$Player,fixed = TRUE)
per_100_cleaned = per_100[,c(2,5,31:32)]
duplicate_players_3 <- per_100_cleaned %>%
count(Player) %>%
filter(n > 1)
per_100_cleaned <- per_100_cleaned %>%
filter(Tm == "TOT" | !(Player %in% duplicate_players_3$Player))
per_100_cleaned$ORtg = as.numeric(per_100_cleaned$ORtg)
per_100_cleaned$DRtg = as.numeric(per_100_cleaned$DRtg)
per_100_cleaned = per_100_cleaned[,-2]
per_100_cleaned$Player = gsub(" Jr.","",per_100_cleaned$Player,fixed = TRUE)
per_100_cleaned$Player = gsub(" III","",per_100_cleaned$Player,fixed = TRUE)
salaries_stats <- player_stats_cleaned %>%
inner_join(salaries_cleaned) %>%
inner_join(adv_stats_cleaned) %>%
inner_join(per_100_cleaned)
salaries_stats$Pos = as.factor(salaries_stats$Pos)
##Converting the age variable into a categorical variable
salaries_stats <- salaries_stats %>%
mutate(Age_cat = cut(Age, breaks = c(-Inf,26,34,Inf),
labels = c("Young","Prime","Old")))
all_stars = all_stars %>%
filter(Player != "Carmelo Anthony" & Player != "Isaiah Thomas" & Player != "Rajon Rondo" & Player != "Derrick Rose" & Player != "Vince Carter" & Player != "Dwight Howard" & Player != "Tyson Chandler" & Player != "DeAndre Jordan")
salaries_stats <- salaries_stats %>%
mutate(Starter = as.factor(if_else(GS/G > 0.9,"Yes","No")),
G_f = as.factor(if_else(Pos == "PG"|Pos == "SG","Guard","Forward")),
All_Star = salaries_stats$Player %in% all_stars$Player)
salaries_stats[is.na(salaries_stats)] = 0
set.seed(10)
training = sample_frac(salaries_stats,(6/8)) #training dataset
testing = salaries_stats %>%
filter(!(Player %in% training$Player)) #testing dataset
salary_model = lm(`Salary(2019-2020)` ~ Pos + TRB + PTS + TOV + AST + PER + `USG%` + BPM + VORP + WS + `AST%` + FTA + Age_cat + Starter + All_Star, data = training)
summary(salary_model)
final_model = lm(`Salary(2019-2020)` ~ Pos + TRB + PTS + TOV + AST + PER + `USG%` + BPM + VORP + WS + `AST%` + FTA + Age_cat + Starter + All_Star, data = salaries_stats)
par(mfrow = c(2,3))
plot(final_model,which = 1)
plot(final_model,which = 2)
plot(final_model,which = 3)
plot(final_model,which = 4)
plot(final_model,which = 5)
salaries_stats$Residual = final_model$residuals
salaries_stats %>%
arrange(Residual)
salaries_stats %>%
arrange(desc(Residual))
salaries_stats %>%
arrange(desc(Residual)) %>%
head()
salaries_stats %>%
arrange(Residual) %>%
head()
salaries_stats %>%
arrange(Residual)
salaries_stats %>%
arrange(desc(Residual)) %>%
head()
knitr::opts_chunk$set(echo = TRUE,message = FALSE, warning = FALSE)
ggplot(salaries_stats, aes(x = 'Salary(2019-2020)')) +
geom_histogram()
library(ggplot2)
library(ggrepel)
bar_plot <- salaries_stats %>%
select(`Salary(2019-2020)`,Pos) %>%
group_by(Pos) %>%
summarise(mean_salary = mean(`Salary(2019-2020)`))
ggplot(salaries_stats, aes(x = 'Salary(2019-2020)')) +
geom_histogram()
ggplot(salaries_stats, aes(x = 'Salary(2019-2020)')) +
geom_histogram()
ggplot(salaries_stats, aes(x = 'Salary(2019-2020)')) +
geom_histogram()
final_model = lm(`Salary(2019-2020)` ~ Pos + TRB + PTS + TOV + AST + PER + `USG%` + BPM + VORP + WS + `AST%` + FTA + Age_cat + Starter + All_Star, data = salaries_stats)
summary(final_model)
par(mfrow = c(2,3))
plot(final_model,which = 1)
plot(final_model,which = 2)
plot(final_model,which = 3)
plot(final_model,which = 4)
plot(final_model,which = 5)
salaries_stats$Residual = final_model$residuals
salaries_stats %>%
arrange(Residual) %>%
head()
library(ggplot2)
library(ggrepel)
bar_plot <- salaries_stats %>%
select(`Salary(2019-2020)`,Pos) %>%
group_by(Pos) %>%
summarise(mean_salary = mean(`Salary(2019-2020)`))
set.seed(10)
training = sample_frac(salaries_stats,(6/8)) #training dataset
setwd("~/Stat 333 Final Project")
